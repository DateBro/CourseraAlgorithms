See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     PASSED
PMD:          FAILED (2 warnings)
Checkstyle:   FAILED (0 errors, 5 warnings)

Correctness:  18/23 tests passed
Memory:       4/4 tests passed
Timing:       1/1 tests passed

Aggregate score: 86.96%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
9.1K Dec 29 16:59 BaseballElimination.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac BaseballElimination.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
BaseballElimination:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------


================================================================


% pmd .
*-----------------------------------------------------------
BaseballElimination.java:11: The private instance (or static) variable 'teamNames' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
BaseballElimination.java:133: The user-supplied array 'games' is stored directly. [ArrayIsStoredDirectly]
PMD ends with 2 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] BaseballElimination.java:13:31: To specify an array type, put the square brackets before the variable name, e.g., 'String[] args' instead of 'String args[]'. [ArrayTypeStyle]
[WARN] BaseballElimination.java:58:13: The local (or parameter) variable 'teamNums' has the same name as an instance variable. Use a different name. [HiddenField]
[WARN] BaseballElimination.java:60:13: The local variable 'V' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] BaseballElimination.java:117:21: The local variable 'V' must start with a lowercase letter and use camelCase. [LocalVariableName]
Checkstyle ends with 0 errors and 4 warnings.

% custom checkstyle checks for BaseballElimination.java
*-----------------------------------------------------------
[WARN] BaseballElimination.java:264:61: The numeric literal '1e-6' appears to be unnecessary. [NumericLiteral]
Checkstyle ends with 0 errors and 1 warning.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of BaseballElimination
*-----------------------------------------------------------
Running 23 total tests.

Test 1: check numberOfTeams()
  * teams4.txt
  * teams5.txt
  * teams8.txt
  * teams10.txt
  * teams29.txt
  * teams48.txt
==> passed

Test 2: check teams()
  * teams4.txt
  * teams5.txt
  * teams8.txt
  * teams10.txt
  * teams29.txt
  * teams48.txt
==> passed

Test 3: check wins()
  * teams4.txt
  * teams5.txt
  * teams8.txt
  * teams10.txt
  * teams29.txt
  * teams48.txt
==> passed

Test 4: check losses()
  * teams4.txt
  * teams5.txt
  * teams8.txt
  * teams10.txt
  * teams29.txt
  * teams48.txt
==> passed

Test 5: check remaining()
  * teams4.txt
  * teams5.txt
  * teams8.txt
  * teams10.txt
  * teams29.txt
  * teams48.txt
==> passed

Test 6: check against()
  * teams4.txt
  * teams5.txt
  * teams8.txt
  * teams10.txt
  * teams29.txt
  * teams48.txt
==> passed

Test 7a: check isEliminated() when n = 4
  * teams4.txt
  * teams4a.txt
  * teams4b.txt
==> passed

Test 7b: check isEliminated() when n = 5
  * teams5.txt
  * teams5a.txt
  * teams5b.txt
  * teams5c.txt
==> passed

Test 7c: check isEliminated() when n = 6 to 19
  * teams7.txt
  * teams8.txt
  * teams10.txt
    - fails for Indiana
    - student   isEliminated() = true
    - reference isEliminated() = false

  * teams12.txt
  * teams12-allgames.txt
    - fails for Team4
    - student   isEliminated() = true
    - reference isEliminated() = false

==> FAILED

Test 7d: check isEliminated() when n = 20 to 30
  * teams24.txt
  * teams29.txt
  * teams30.txt
==> passed

Test 7e: check isEliminated() when n = 30 to 50
  * teams32.txt
  * teams36.txt
    - fails for Team21
    - student   isEliminated() = false
    - reference isEliminated() = true

  * teams42.txt
  * teams48.txt
==> FAILED

Test 8: check that isEliminated() is consistent with certificateOfElimination()
  * teams4.txt
  * teams5.txt
  * teams8.txt
  * teams10.txt
  * teams29.txt
  * teams48.txt
==> passed

Test 9a: check certificateOfElimination() when n = 4
  * teams4.txt
  * teams4a.txt
  * teams4b.txt
==> passed

Test 9b: check certificateOfElimination() when n = 5
  * teams5.txt
  * teams5a.txt
  * teams5b.txt
  * teams5c.txt
==> passed

Test 9c: check certificateOfElimination() when n = 6 to 20
  * teams7.txt
  * teams8.txt
  * teams10.txt
    - false positive in certificate of elimination for 'Indiana'
    - student   certificate of elimination = { Atlanta Boston Chicago Cleveland Dallas Denver Detroit Golden_State }
    - reference certificate of elimination = null

  * teams12.txt
  * teams12-allgames.txt
    - false negative in certificate of elimination for 'Team0'
    - student   certificate of elimination = { }
    - reference certificate of elimination = { Team1 }

==> FAILED

Test 9d: check certificateOfElimination() when n = 20 to 30
  * teams24.txt
    - invalid certificate of elimination for 'Team13'
    - student   certificate of elimination = { Team0 Team1 Team2 Team3 Team6 Team8 Team10 Team14 Team15 Team17 Team18 Team20 Team21 Team22 }
    - reference certificate of elimination = { Team14 Team15 Team17 Team20 Team22 }

  * teams29.txt
  * teams30.txt
    - invalid certificate of elimination for 'Team0'
    - student   certificate of elimination = { Team1 Team2 Team3 Team4 Team5 Team6 Team8 Team9 Team10 Team11 Team13 Team14 Team15 Team16 Team17 Team19 Team20 Team21 Team22 Team23 Team24 Team25 Team26 Team28 Team29 }
    - reference certificate of elimination = { Team16 }

==> FAILED

Test 9e: check certificateOfElimination() when n = 30 to 50
  * teams32.txt
    - invalid certificate of elimination for 'Team25'
    - student   certificate of elimination = { Team0 Team1 Team4 Team5 Team6 Team7 Team8 Team9 Team10 Team11 Team15 Team16 Team18 Team19 Team20 Team21 Team22 Team23 Team24 Team26 Team27 Team30 Team31 }
    - reference certificate of elimination = { Team0 Team6 Team8 Team11 Team26 }

  * teams36.txt
    - false negative in certificate of elimination for 'Team21'
    - student   certificate of elimination = null
    - reference certificate of elimination = { Team18 Team20 Team22 Team23 }

  * teams42.txt
    - invalid certificate of elimination for 'Team6'
    - student   certificate of elimination = { Team0 Team1 Team2 Team3 Team4 Team5 Team7 Team8 Team9 Team10 Team11 Team12 Team13 Team16 Team17 Team18 Team19 Team21 Team22 Team24 Team26 Team27 Team28 Team29 Team30 Team31 Team32 Team33 Team34 Team35 Team38 Team39 Team40 Team41 }
    - reference certificate of elimination = { Team0 Team18 Team19 Team21 }

  * teams48.txt
    - invalid certificate of elimination for 'Team6'
    - student   certificate of elimination = { Team0 Team1 Team2 Team3 Team5 Team7 Team8 Team9 Team10 Team12 Team13 Team14 Team15 Team16 Team17 Team18 Team19 Team20 Team21 Team22 Team24 Team26 Team27 Team28 Team29 Team30 Team31 Team32 Team33 Team34 Team35 Team36 Team37 Team38 Team39 Team40 Team41 Team42 Team43 Team44 Team45 Team46 }
    - reference certificate of elimination = { Team38 Team39 Team40 }

==> FAILED

Test 10: check methods when n = 1
  * teams1.txt
  * teams1.txt
  * teams1.txt
  * teams1.txt
  * teams1.txt
  * teams1.txt
  * teams1.txt
==> passed

Test 11: check immutability by calling certificateOfElimination() both before
         and after calling isEliminated() and verifying that the results match
  * teams4.txt
  * teams5.txt
  * teams29.txt
==> passed

Test 12: check that certificateOfElimination() returns null for eliminated teams
  * teams4.txt
  * teams5.txt
==> passed

Test 13: check for invalid arguments
  * teams4.txt
  * teams5.txt
==> passed

Test 14: check for dependence on reference equality of strings
==> passed

Test 15: check that two Baseball objects can be created at the same time
  * teams4.txt and teams5.txt
  * teams5.txt and teams7.txt
==> passed


Total: 18/23 tests passed!


================================================================
********************************************************************************
*  TIMING
********************************************************************************

Timing BaseballElimination
*-----------------------------------------------------------
Running 1 total tests.

    n   constructor isEliminated() + certificateOfElimination()
----------------------------------------------------------------
   30       0.57       0.01
   36       0.79       0.00
   42       1.23       0.00
   48       2.49       0.00
   54       4.27       0.00
   60       7.24       0.00
time = 1.31e-06 * n^3.75  (R^2 = 0.96)

Total: 1/1 tests passed!


================================================================



********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of BaseballElimination
*-----------------------------------------------------------
Running 4 total tests.

Student   vertices     = 0.50 n^2 - 0.50 n + 2.00   (R^2 = 1.000)
Reference vertices     = 0.50 n^2 - 0.50 n + 3.00   (R^2 = 1.000)
=> passed

Student   edges        = 1.50 n^2 - 3.50 n + 2.00   (R^2 = 1.000)
Reference edges        = 1.50 n^2 - 3.50 n + 2.00   (R^2 = 1.000)
=> passed

Student   memory of G  = 176.00 n^2 - 384.00 n + 344.00   (R^2 = 1.000)
Reference memory of G  = 176.00 n^2 - 384.00 n + 384.00   (R^2 = 1.000)
=> passed

Student   memory       = 4.00 n^2 + 193.13 n + 138.00   (R^2 = 1.000)
Reference memory       = 3.99 n^2 + 222.25 n + 396.00   (R^2 = 1.000)
=> passed

Total: 4/4 tests passed!

================================================================