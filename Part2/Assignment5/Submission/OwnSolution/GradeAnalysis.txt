See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     FAILED (2 warnings)
PMD:          FAILED (7 warnings)
Checkstyle:   FAILED (0 errors, 43 warnings)

Correctness:  62/64 tests passed
Memory:       10/10 tests passed
Timing:       120/159 tests passed

Aggregate score: 93.22%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
3.3K Jan 23 18:48 BurrowsWheeler.java
3.9K Jan 23 18:48 CircularSuffixArray.java
2.3K Jan 23 18:48 MoveToFront.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac CircularSuffixArray.java
*-----------------------------------------------------------

% javac BurrowsWheeler.java
*-----------------------------------------------------------

% javac MoveToFront.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
CircularSuffixArray:

BurrowsWheeler:

MoveToFront:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
M P SS_SHOULD_BE_STATIC SS: The instance variable 'CUTOFF' is final and initialized to a compile-time constant. Should it also be static?  At CircularSuffixArray.java:[line 8]
M P SS_SHOULD_BE_STATIC SS: The instance variable 'R' is final and initialized to a compile-time constant. Should it also be static?  At CircularSuffixArray.java:[line 9]
Warnings generated: 2


================================================================


% pmd .
*-----------------------------------------------------------
CircularSuffixArray.java:4: The private instance (or static) variable 'str' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
CircularSuffixArray.java:5: The private instance (or static) variable 'N' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
CircularSuffixArray.java:6: The private instance (or static) variable 'index' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
CircularSuffixArray.java:7: Can you replace the instance (or static) variable 'suffixArr' with a local variable? [SingularField]
CircularSuffixArray.java:7: The private instance (or static) variable 'suffixArr' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
CircularSuffixArray.java:8: This instance variable should be turned into a class constant by adding the 'static' modifier. [FinalFieldCouldBeStatic]
CircularSuffixArray.java:9: This instance variable should be turned into a class constant by adding the 'static' modifier. [FinalFieldCouldBeStatic]
PMD ends with 7 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] BurrowsWheeler.java:4:8: Unused import statement for 'edu.princeton.cs.algs4.StdOut'. [UnusedImports]
[WARN] BurrowsWheeler.java:6:8: Unused import statement for 'java.util.Arrays'. [UnusedImports]
[WARN] BurrowsWheeler.java:7:8: Unused import statement for 'java.util.Comparator'. [UnusedImports]
[WARN] BurrowsWheeler.java:17:13: The local variable 'N' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] BurrowsWheeler.java:42:13: The local variable 'N' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] BurrowsWheeler.java:46:17: To specify an array type, put the square brackets before the variable name, e.g., 'String[] args' instead of 'String args[]'. [ArrayTypeStyle]
[WARN] BurrowsWheeler.java:53:13: The local variable 'N' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] BurrowsWheeler.java:63:13: The local variable 'N' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] BurrowsWheeler.java:68:51: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] BurrowsWheeler.java:68:68: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] BurrowsWheeler.java:70:13: The local variable 'N' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] BurrowsWheeler.java:93:13: 'else' is not followed by whitespace. [WhitespaceAfter]
[WARN] BurrowsWheeler.java:93:13: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] CircularSuffixArray.java:5:17: The instance variable 'N' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] CircularSuffixArray.java:8:23: The instance variable 'CUTOFF' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] CircularSuffixArray.java:9:23: The instance variable 'R' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] CircularSuffixArray.java:24:40: The local (or parameter) variable 'index' has the same name as an instance variable. Use a different name. [HiddenField]
[WARN] CircularSuffixArray.java:29:44: The local (or parameter) variable 'suffixArr' has the same name as an instance variable. Use a different name. [HiddenField]
[WARN] CircularSuffixArray.java:33:38: The local (or parameter) variable 'suffixArr' has the same name as an instance variable. Use a different name. [HiddenField]
[WARN] CircularSuffixArray.java:33:55: The local (or parameter) variable 'index' has the same name as an instance variable. Use a different name. [HiddenField]
[WARN] CircularSuffixArray.java:39:29: The local (or parameter) variable 'suffixArr' has the same name as an instance variable. Use a different name. [HiddenField]
[WARN] CircularSuffixArray.java:39:46: The local (or parameter) variable 'index' has the same name as an instance variable. Use a different name. [HiddenField]
[WARN] CircularSuffixArray.java:71:35: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] CircularSuffixArray.java:74:31: The local (or parameter) variable 'str' has the same name as an instance variable. Use a different name. [HiddenField]
[WARN] CircularSuffixArray.java:74:42: The local (or parameter) variable 'suffixArr' has the same name as an instance variable. Use a different name. [HiddenField]
[WARN] CircularSuffixArray.java:76:13: The local (or parameter) variable 'index' has the same name as an instance variable. Use a different name. [HiddenField]
[WARN] CircularSuffixArray.java:80:47: The local (or parameter) variable 'str' has the same name as an instance variable. Use a different name. [HiddenField]
[WARN] CircularSuffixArray.java:80:58: The local (or parameter) variable 'suffixArr' has the same name as an instance variable. Use a different name. [HiddenField]
[WARN] CircularSuffixArray.java:93:34: The local (or parameter) variable 'suffixArr' has the same name as an instance variable. Use a different name. [HiddenField]
[WARN] CircularSuffixArray.java:93:68: The local (or parameter) variable 'str' has the same name as an instance variable. Use a different name. [HiddenField]
[WARN] CircularSuffixArray.java:93:79: The local (or parameter) variable 'index' has the same name as an instance variable. Use a different name. [HiddenField]
[WARN] CircularSuffixArray.java:103:29: The local (or parameter) variable 'index' has the same name as an instance variable. Use a different name. [HiddenField]
[WARN] CircularSuffixArray.java:126:13: The local variable 'N' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] MoveToFront.java:12:13: The local variable 'N' must start with a lowercase letter and use camelCase. [LocalVariableName]
Checkstyle ends with 0 errors and 34 warnings.

% custom checkstyle checks for CircularSuffixArray.java
*-----------------------------------------------------------

% custom checkstyle checks for BurrowsWheeler.java
*-----------------------------------------------------------
[WARN] BurrowsWheeler.java:1: You must call either 'BinaryStdOut.flush()' or 'BinaryStdOut.close()' in 'inverseTransform()'. [MethodCallCount]
[WARN] BurrowsWheeler.java:13:9: You should not need to use the 'StringBuilder' data type in this program. [Design]
[WARN] BurrowsWheeler.java:20:39: The numeric literal '32' appears to be unnecessary. [NumericLiteral]
[WARN] BurrowsWheeler.java:33:9: You should not need to use the 'StringBuilder' data type in this program. [Design]
[WARN] BurrowsWheeler.java:34:41: The numeric literal '32' appears to be unnecessary. [NumericLiteral]
[WARN] BurrowsWheeler.java:39:49: The numeric literal '2000' appears to be unnecessary. [NumericLiteral]
[WARN] BurrowsWheeler.java:45:15: You will probably not meet the performance requirement for 'inverseTransform()' if you call 'Merge.sort()'. [Performance]
[WARN] BurrowsWheeler.java:62:59: You should not need to use the 'StringBuilder' data type in this program. [Design]
[WARN] BurrowsWheeler.java:68:68: You should not need to use the 'StringBuilder' data type in this program. [Design]
Checkstyle ends with 0 errors and 9 warnings.

% custom checkstyle checks for MoveToFront.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of CircularSuffixArray
*-----------------------------------------------------------
Running 15 total tests.

Test 1: check index() and length() with random binary strings
  * length = 10
  * length = 100
  * length = 1000
==> passed

Test 2: check index() and length() with random uppercase strings
  * length = 10
  * length = 100
  * length = 1000
==> passed

Test 3: check index() and length() with random ASCII strings
  * length = 10
  * length = 100
  * length = 1000
==> passed

Test 4: check index() and length() with random extended ASCII strings
  * length = 10
  * length = 100
  * length = 1000
==> passed

Test 5: check index() and length() with strings from text files
  * cadabra.txt
  * amendments.txt
  * moby1.txt
  * dickens1000.txt
==> passed

Test 6: check index() and length() with strings from binary files
  * us.gif
  * CS_bricks.jpg
  * rand1K.bin
==> passed

Test 7: check index() and length() with random strings of length 0, 1, and 2
  * length = 0
  * length = 1
  * length = 2
==> passed

Test 8: check that index() throws an exception when argument is out of bounds
  * string of length 10
  * string of length 100
  * string of length 2
  * string of length 1
  * string of length 0
==> passed

Test 9: check that constructor throws an exception when argument is null
==> passed

Test 10: check that two CircularSuffixArray objects can be created at the same time
  * cadabra.txt and amendments.txt
  * amendments.txt and cadabra.txt
  * dickens1000.txt and cadabra.txt
==> passed

Test 11: check that CircularSuffixArray is immutable
  * string = "SJYQQUFGUCNHEAPFDDJQPLWHOUXFXT"
  * string = "AABAABAAAAABBAAAABBBAABABAABBB"
  * string = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
  * string = hex representation: 8f c5 e5 14 d4 8f 20 f9 1b 32 2b 2e 12 76 f7 
==> passed

Test 12: check index() and length() with corner-case strings
  * a.txt
  * nomatch.txt
  * zebra.txt
  * alphanum.txt
==> passed

Test 13: check index() and length() with strings that are nontrivial circular
         that are nontrivial circular suffixes of themselves
  * stars.txt
  * couscous.txt
==> passed

Test 14: check index() and length() with unary strings
  * length 10 string over unary alphabet
  * length 100 string over unary alphabet
  * length 1000 string over unary alphabet
==> passed

Test 15: check index() and length() with random strings
         that are nontrivial circular suffixes of themselves
  * length 2 string over binary alphabet, repeated 2 times
  * length 2 string over binary alphabet, repeated 10 times
  * length 5 string over binary alphabet, repeated 2 times
  * length 5 string over binary alphabet, repeated 3 times
  * length 5 string over binary alphabet, repeated 5 times
  * length 7 string over uppercase alphabet, repeated 2 times
  * length 7 string over uppercase alphabet, repeated 3 times
  * length 7 string over uppercase alphabet, repeated 5 times
==> passed

Total: 15/15 tests passed!


================================================================
Testing correctness of MoveToFront
*-----------------------------------------------------------
Running 23 total tests.

Test 1a: check main() on text files
  * java MoveToFront - < abra.txt
  * java MoveToFront - < zebra.txt
  * java MoveToFront - < amendments.txt
  * java MoveToFront - < aesop.txt
==> passed

Test 1b: check main() on text files
  * java MoveToFront + < abra.txt.mtf
  * java MoveToFront + < zebra.txt.mtf
  * java MoveToFront + < amendments.txt.mtf
  * java MoveToFront + < aesop.txt.mtf
==> passed

Test 2a: check that main() is consistent with encode() on text files
  * abra.txt
  * zebra.txt
  * amendments.txt
  * aesop.txt
==> passed

Test 2b: check that main() is consistent with decode() on text files
  * abra.txt.mtf
  * zebra.txt.mtf
  * amendments.txt.mtf
  * aesop.txt.mtf
==> passed

Test 3a: check encode() on text files
  * abra.txt
  * zebra.txt
  * amendments.txt
  * aesop.txt
  * stars.txt
  * alphanum.txt
  * a.txt
==> passed

Test 3b: check encode() on binary files
  * us.gif
  * CS_bricks.jpg
  * rand10K.bin
==> passed

Test 3c: check encode() on random inputs
  * 10 random characters from { A } alphabet
  * 10 random characters from { A, B } alphabet
  * 10 random characters from { A, T, C, G } alphabet
  * 10 random characters from uppercase letter alphabet
  * 1000 random characters from { A } alphabet
  * 1000 random characters from { A, B } alphabet
  * 1000 random characters from { A, T, C, G } alphabet
  * 1000 random characters from uppercase letter alphabet
==> passed

Test 3d: check encode() on more random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 4a: check decode() on move-to-front-encoded text files
  * abra.txt.mtf
  * zebra.txt.mtf
  * amendments.txt.mtf
  * aesop.txt.mtf
  * stars.txt.mtf
  * alphanum.txt.mtf
  * a.txt.mtf
==> passed

Test 4b: check decode() on move-to-front encoded binary files
  * us.gif.mtf
  * CS_bricks.jpg.mtf
  * rand10K.bin.mtf
==> passed

Test 4c: check decode() on random inputs
  * 10 random characters from { A } alphabet
  * 10 random characters from { A, B } alphabet
  * 10 random characters from { A, T, C, G } alphabet
  * 10 random characters from uppercase letter alphabet
  * 1000 random characters from { A } alphabet
  * 1000 random characters from { A, B } alphabet
  * 1000 random characters from { A, T, C, G } alphabet
  * 1000 random characters from uppercase letter alphabet
==> passed

Test 4d: check decode() on more random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 4e: check decode() on random inputs
         that were encoded with move-to-front
  * 10 random characters from { A } alphabet
  * 10 random characters from { A, B } alphabet
  * 10 random characters from { A, T, C, G } alphabet
  * 10 random characters from uppercase letter alphabet
  * 1000 random characters from { A } alphabet
  * 1000 random characters from { A, B } alphabet
  * 1000 random characters from { A, T, C, G } alphabet
  * 1000 random characters from uppercase letter alphabet
==> passed

Test 4f: check decode() on more random inputs
         that were encoded with move-to-front
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 5a: check whether decode(encode()) = original on text files
  * abra.txt
  * zebra.txt
  * amendments.txt
  * aesop.txt
  * stars.txt
  * alphanum.txt
  * a.txt
==> passed

Test 5b: check whether decode(encode()) = original on binary files
  * us.gif
  * CS_bricks.jpg
  * rand10K.bin
==> passed

Test 5c: check that decode(encode()) = original on random inputs
  * 10 random characters from { A } alphabet
  * 10 random characters from { A, B } alphabet
  * 10 random characters from { A, T, C, G } alphabet
  * 10 random characters from uppercase letter alphabet
  * 100 random characters from { A } alphabet
  * 1000 random characters from { A, B } alphabet
  * 1000 random characters from { A, T, C, G } alphabet
  * 1000 random characters from uppercase letter alphabet
==> passed

Test 5d: check that decode(encode()) = original on random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 6a: check that encode() calls either close() or flush()
  * amendments.txt
  * aesop.txt
==> passed

Test 6b: check that decode() calls either close() or flush()
  * amendments.txt.mtf
  * aesop.txt.mtf
==> passed

Test 7a: check encode() on large files
  * rand100K.bin
  * world192.txt
==> passed

Test 7b: check decode() on large files
  * rand100K.bin.mtf
  * world192.txt.mtf
==> passed

Test 7c: check whether decode(encode()) = original on large files
  * rand100K.bin
  * world192.txt
==> passed


Total: 23/23 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference CircularSuffixArray)
********************************************************************************

Testing correctness of BurrowsWheeler
*-----------------------------------------------------------
Running 26 total tests.

Test 1a: check main() on text files
  * java BurrowsWheeler - < abra.txt
  * java BurrowsWheeler - < zebra.txt
  * java BurrowsWheeler - < cadabra.txt
  * java BurrowsWheeler - < amendments.txt
==> passed

Test 1b: check main() on text files
  * java BurrowsWheeler + < abra.txt.bwt
  * java BurrowsWheeler + < zebra.txt.bwt
  * java BurrowsWheeler + < cadabra.txt.bwt
  * java BurrowsWheeler + < amendments.txt.bwt
==> passed

Test 2a: check that main() is consistent with transform() on text files
  * abra.txt
  * zebra.txt
  * cadabra.txt
  * amendments.txt
==> passed

Test 2b: check that main() is consistent with inverseTransform() on text files
  * abra.txt.bwt
  * zebra.txt.bwt
  * cadabra.txt.bwt
  * amendments.txt.bwt
==> passed

Test 3a: check transform() on text files
  * abra.txt
  * zebra.txt
  * cadabra.txt
  * amendments.txt
==> passed

Test 3b: check transform() on corner-case text files
  * alphanum.txt
  * a.txt
==> passed

Test 3c: check transform() on binary files
  * us.gif
  * CS_bricks.jpg
  * rand10K.bin
==> passed

Test 3d: check transform() on random inputs
  * 10 random characters from binary alphabet
  * 10 random characters from DNA alphabet
  * 10 random characters from uppercase alphabet
  * 1000 random characters from binary alphabet
  * 1000 random characters from DNA alphabet
  * 1000 random characters from uppercase alphabet
==> passed

Test 3e: check transform() on more random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 3f: check tranform() on random inputs that are circular
         shifts of themselves
  * 5 random strings from unary alphabet
  * 5 random strings from binary alphabet
  * 5 random strings from DNA alphabet
  * 5 random strings from uppercase alphabet
==> passed

Test 4a: check inverseTransform() on text files
  * abra.txt.bwt
  * zebra.txt.bwt
  * cadabra.txt.bwt
  * amendments.txt.bwt
==> passed

Test 4b: check inverseTransform() on corner-case text files
  * alphanum.txt.bwt
  * a.txt.bwt
  * stars.txt.bwt
  * couscous.txt.bwt
==> passed

Test 4c: check inverseTransform() on binary files
  * us.gif.bwt
  * CS_bricks.jpg.bwt
  * rand10K.bin.bwt
==> passed

Test 4d: check inverseTransform() of transform() on random inputs
  * 10 random characters from unary alphabet
  * 10 random characters from binary alphabet
  * 10 random characters from DNA alphabet
  * 10 random characters from uppercase alphabet
  * 100 random characters from unary alphabet
  * 1000 random characters from binary alphabet
  * 1000 random characters from DNA alphabet
  * 1000 random characters from uppercase alphabet
==> passed

Test 4e: check inverseTransform() of transform() on more random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 5a: check that inverseTransform(transform()) = original on text files
  * abra.txt
  * zebra.txt
  * cadabra.txt
  * amendments.txt
==> passed

Test 5b: check that inverseTransform(transform()) = original on corner-case text files
  * alphanum.txt
  * a.txt
  * stars.txt
  * couscous.txt
==> passed

Test 5c: check that inverseTransform(transform()) = original on binary files
  * us.gif
  * CS_bricks.jpg
  * rand10K.bin
==> passed

Test 5d: check that inverseTransform(tranform()) = original on random inputs
  * 10 random characters from binary alphabet
  * 10 random characters from DNA alphabet
  * 10 random characters from uppercase alphabet
  * 1000 random characters from binary alphabet
  * 1000 random characters from DNA alphabet
  * 1000 random characters from uppercase alphabet
==> passed

Test 5e: check that inverseTransform(tranform()) = original on random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 5f: check that inverseTransform(tranform()) = original
         on random inputs that are circular shifts of themselves
  * random strings from unary alphabet
  * random strings from binary alphabet
  * random strings from DNA alphabet
  * random strings from uppercase alphabet
==> passed

Test 6a: check that transform() calls either close() or flush()
  * amendments.txt
  * aesop.txt
==> passed

Test 6b: check that inverseTransform() calls either close() or flush()
  * amendments.txt.bwt
  * aesop.txt.bwt
==> passed

Test 7a: check transform() on large files
  * rand100K.bin
  * world192.txt
==> passed

Test 7b: check inverseTransform() on large files
  * rand100K.bin.bwt
  * world192.txt.bwt
    - student   length = 0
    - reference length = 2473400
    - student:   
    - reference: 2a 2a 2a 2a 54 68 65 20 50 .. 72 6c 61 6e 64 0d 0a 0d 0a 

==> FAILED

Test 7c: check that inverseTransform(transform()) = original on large files
  * rand100K.bin
  * world192.txt
    - student   length = 0
    - reference length = 2473400
    - student:   
    - reference: 2a 2a 2a 2a 54 68 65 20 50 .. 72 6c 61 6e 64 0d 0a 0d 0a 

==> FAILED


Total: 24/26 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of CircularSuffixArray
*-----------------------------------------------------------
Running 10 total tests.

Memory usage of a CircularSuffixArray for a random string of length n.
Maximum allowed memory is 64n + 128.

                 n        bytes
-------------------------------
=> passed       16          320
=> passed       32          480
=> passed       64          800
=> passed      128         1440
=> passed      256         2720
=> passed      512         5280
=> passed     1024        10400
=> passed     2048        20640
=> passed     4096        41120
=> passed     8192        82080
==> 10/10 tests passed

Total: 10/10 tests passed!

Estimated student memory (bytes) = 10.00 n + 160.00   (R^2 = 1.000)
================================================================



Could not test BurrowsWheeler: MemoryOfBurrowsWheeler.class does not exist.


Could not test MoveToFront: MemoryOfMoveToFront.class does not exist.


********************************************************************************
*  TIMING
********************************************************************************

Timing CircularSuffixArray
*-----------------------------------------------------------
Running 26 total tests.

Tests  1-13: time to create a circular suffix array for the first
             n character of dickens.txt and call index(i) for each i

            [ max allowed time = 10 seconds and <= 12x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.01       0.00      15.50
=> passed     2000       0.00       0.00       1.95
=> passed     4000       0.00       0.00       2.78
=> passed     8000       0.01       0.00       1.89
=> passed    16000       0.01       0.00       3.01
=> passed    32000       0.02       0.01       3.41
=> passed    64000       0.03       0.01       4.93
=> passed   128000       0.07       0.01       4.68
=> passed   256000       0.11       0.02       4.39
=> passed   512000       0.24       0.05       4.47
=> passed  1024000       0.51       0.11       4.41
=> passed  2048000       1.31       0.33       3.97
=> passed  4096000       2.62       0.68       3.84

Estimated running time (using last 6 measurements)
    = 1.60e-07 * n^1.09  (R^2 = 0.99)


Tests 14-26: time to create circular suffix array for n random ASCII characters
            and call index(i) for each i

            [ max allowed time = 10 seconds and <= 20x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       3.32
=> passed     2000       0.00       0.00       2.61
=> passed     4000       0.00       0.00       1.50
=> passed     8000       0.00       0.00       1.77
=> passed    16000       0.00       0.00       2.11
=> passed    32000       0.00       0.00       2.51
=> passed    64000       0.01       0.00       2.96
=> passed   128000       0.02       0.01       3.81
=> passed   256000       0.04       0.02       2.72
=> passed   512000       0.06       0.04       1.69
=> passed  1024000       0.11       0.07       1.53
=> passed  2048000       0.34       0.21       1.66
=> passed  4096000       0.74       0.43       1.72

Estimated running time (using last 6 measurements)
    = 9.88e-08 * n^1.03  (R^2 = 0.98)


Total: 26/26 tests passed!


================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing MoveToFront
*-----------------------------------------------------------
Running 38 total tests.

Test 1: count calls to methods in BinaryStdOut from encode()
  * abra.txt
  * amendments.txt
==> passed

Test 2: count calls to methods in BinaryStdOut from decode()
  * abra.txt.mtf
  * amendments.txt.mtf
==> passed

Tests  3-12: Timing encode() with first n character of dickens.txt
             [ max allowed time = 2 seconds and <= 4x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       1.25
=> passed     2000       0.01       0.00       1.92
=> passed     4000       0.01       0.01       1.98
=> passed     8000       0.02       0.01       2.01
=> passed    16000       0.04       0.02       2.04
=> passed    32000       0.08       0.04       2.08
=> passed    64000       0.16       0.08       2.11
=> passed   128000       0.33       0.15       2.10
=> passed   256000       0.65       0.30       2.14

Estimated running time (using last 6 measurements)
     = 2.95e-06 * n^0.99  (R^2 = 1.00)


Tests  13-20: Timing encode() with first n character of abab.txt
             [ max allowed time = 2 seconds and <= 4x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       2.36
=> passed     2000       0.00       0.00       2.37
=> passed     4000       0.01       0.00       2.35
=> passed     8000       0.02       0.01       2.36
=> passed    16000       0.04       0.02       2.33
=> passed    32000       0.07       0.03       2.36
=> passed    64000       0.14       0.06       2.35
=> passed   128000       0.28       0.12       2.35
=> passed   256000       0.57       0.24       2.35

Estimated running time (using last 6 measurements)
     = 2.24e-06 * n^1.00  (R^2 = 1.00)


Tests 21-29: Timing decode() with first n character of dickens.txt
             [ max allowed time = 2 seconds and <= 4x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       1.30
=> passed     2000       0.00       0.00       1.04
=> passed     4000       0.01       0.00       1.28
=> passed     8000       0.01       0.01       1.28
=> passed    16000       0.02       0.02       1.27
=> passed    32000       0.04       0.03       1.25
=> passed    64000       0.08       0.07       1.25
=> passed   128000       0.16       0.13       1.25
=> passed   256000       0.32       0.26       1.27

Estimated running time (using last 6 measurements)
     = 1.57e-06 * n^0.98  (R^2 = 1.00)


Tests 30-38: Timing decode() with first n character of abab.txt
             [ max allowed time = 2 seconds and <= 4x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       1.23
=> passed     2000       0.00       0.00       1.24
=> passed     4000       0.00       0.00       1.23
=> passed     8000       0.01       0.01       1.22
=> passed    16000       0.02       0.02       1.23
=> passed    32000       0.04       0.03       1.23
=> passed    64000       0.07       0.06       1.23
=> passed   128000       0.15       0.12       1.22
=> passed   256000       0.30       0.24       1.23

Estimated running time (using last 6 measurements)
     = 1.16e-06 * n^1.00  (R^2 = 1.00)


Total: 38/38 tests passed!


================================================================



********************************************************************************
*  TIMING (substituting reference CircularSuffixArray)
********************************************************************************

Timing BurrowsWheeler
*-----------------------------------------------------------
Running 95 total tests.

Test 1: count calls to methods in CircularSuffixArray from transform()
  * abra.txt
  * amendments.txt
==> passed

Test 2: count calls to methods in CircularSuffixArray from inverseTransform()
  * abra.txt.bwt
  * amendments.txt.bwt
==> passed

Test 3: count calls to methods in BinaryStdOut from transform()
  * abra.txt
  * amendments.txt
==> passed

Test 4: count calls to methods in BinaryStdOut from inverseTransform()
  * abra.txt.bwt
  * amendments.txt.bwt
==> passed

Tests  5-17: timing transform() with first n character of dickens.txt
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       0.14
=> passed     2000       0.00       0.00       0.41
=> passed     4000       0.00       0.00       0.43
=> passed     8000       0.00       0.00       0.52
=> passed    16000       0.00       0.01       0.52
=> passed    32000       0.01       0.01       0.58
=> passed    64000       0.01       0.01       0.67
=> passed   128000       0.02       0.02       0.95
=> passed   256000       0.04       0.04       0.98
=> passed   512000       0.08       0.08       0.98
=> passed  1024000       0.16       0.17       0.98
=> passed  2048000       0.41       0.42       0.96
=> passed  4096000       0.79       0.91       0.87

Estimated running time as a function of n (using last 6 measurements)
    = 4.02e-08 * n^1.10  (R^2 = 1.00)


Tests 18-30: timing transform() with first n character of random.bin
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       0.84
=> passed     2000       0.00       0.00       0.89
=> passed     4000       0.00       0.00       0.94
=> passed     8000       0.00       0.00       1.02
=> passed    16000       0.00       0.00       0.97
=> passed    32000       0.01       0.00       1.33
=> passed    64000       0.01       0.01       0.94
=> passed   128000       0.02       0.02       0.98
=> passed   256000       0.04       0.04       0.99
=> passed   512000       0.09       0.09       0.99
=> passed  1024000       0.19       0.19       0.99
=> passed  2048000       0.44       0.44       0.98
=> passed  4096000       1.01       1.05       0.96

Estimated running time as a function of n (using last 6 measurements)
    = 3.27e-08 * n^1.13  (R^2 = 1.00)


Tests 31-43: timing transform() with first n character of abab.txt
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       0.84
=> passed     2000       0.00       0.00       1.13
=> passed     4000       0.00       0.00       0.95
=> passed     8000       0.00       0.00       1.04
=> passed    16000       0.00       0.00       0.98
=> passed    32000       0.00       0.00       0.67
=> passed    64000       0.00       0.00       0.99
=> passed   128000       0.00       0.00       1.00
=> passed   256000       0.01       0.01       1.01
=> passed   512000       0.02       0.02       0.94
=> passed  1024000       0.03       0.03       0.99
=> passed  2048000       0.05       0.05       1.01
=> passed  4096000       0.10       0.10       0.99

Estimated running time as a function of n (using last 6 measurements)
    = 3.51e-08 * n^0.98  (R^2 = 1.00)


Tests 44-56: timing inverseTransform() with first n character of dickens.txt
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       7.97
=> passed     2000       0.00       0.00       9.55
=> passed     4000       0.01       0.00      16.94
=> passed     8000       0.04       0.00      37.03
=> FAILED    16000       0.20       0.00      81.70
=> FAILED    32000       0.94       0.00     614.48
=> FAILED    64000       4.07       0.00    1441.25
=> FAILED   128000
=> FAILED   256000
=> FAILED   512000
=> FAILED  1024000
=> FAILED  2048000
=> FAILED  4096000

==> FAILED.   inverseTransform() is possibly n^2 or worse.
Estimated running time as a function of n (using last 6 measurements)
    = 2.65e-10 * n^2.12  (R^2 = 1.00)


Tests 57-69: timing inverseTransform() with first n character of random.bin
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1024       0.00       0.00      18.91
=> passed     2048       0.00       0.00      16.43
=> passed     4096       0.01       0.00      48.66
=> passed     8192       0.03       0.00     126.14
=> FAILED    16384       0.12       0.00     330.32
=> FAILED    32768       0.51       0.00     744.12
=> FAILED    65536       2.08       0.00    1238.56
=> FAILED   131072
=> FAILED   262144
=> FAILED   524288
=> FAILED  1048576
=> FAILED  2097152
=> FAILED  4194304

==> FAILED.   inverseTransform() is possibly n^2 or worse.
Estimated running time as a function of n (using last 6 measurements)
    = 7.96e-10 * n^1.95  (R^2 = 1.00)


Tests 70-82: timing inverseTransform() with first n character of abab.txt
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00      19.22
=> passed     2000       0.00       0.00      43.39
=> passed     4000       0.01       0.00      94.95
=> passed     8000       0.03       0.00     197.72
=> FAILED    16000       0.13       0.00     375.89
=> FAILED    32000       0.50       0.00     457.31
=> FAILED    64000       2.01       0.00    1537.11
=> FAILED   128000
=> FAILED   256000
=> FAILED   512000
=> FAILED  1024000
=> FAILED  2048000
=> FAILED  4096000

==> FAILED.   inverseTransform() is possibly n^2 or worse.
Estimated running time as a function of n (using last 6 measurements)
    = 7.07e-10 * n^1.97  (R^2 = 1.00)


Tests 83-95: timing inverseTransform() with first n character of cyclic.bin
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1024       0.00       0.00       8.79
=> passed     2048       0.00       0.00      19.10
=> passed     4096       0.00       0.00      35.05
=> passed     8192       0.02       0.00      65.27
=> passed    16384       0.07       0.00     121.48
=> FAILED    32768       0.27       0.00     344.34
=> FAILED    65536       1.08       0.00     438.75
=> FAILED   131072       4.28       0.01     712.49
=> FAILED   262144
=> FAILED   524288
=> FAILED  1048576
=> FAILED  2097152
=> FAILED  4194304

==> FAILED.   inverseTransform() is possibly n^2 or worse.
Estimated running time as a function of n (using last 6 measurements)
    = 3.77e-10 * n^1.96  (R^2 = 1.00)


Total: 56/95 tests passed!


================================================================
